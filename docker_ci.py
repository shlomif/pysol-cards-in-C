#! /usr/bin/env python3
# -*- coding: utf-8 -*-
# vim:fenc=utf-8
#
# Copyright Â© 2025 Shlomi Fish < https://www.shlomifish.org/ >
#
# Licensed under the terms of the MIT license.

"""

"""

# import json
from pathlib import Path
import re
import subprocess
import sys
import yaml


def _write_header(outfh):
    outfh.write(
        "# This file is GENERATED BY\n" +
        "# docker_ci.py\n"
    )


def _write(output_path, data):
    with open(output_path, "wt") as outfh:
        _write_header(outfh=outfh)
        # yaml.safe_dump(o, outfh)
        yaml.safe_dump(data, stream=outfh, canonical=False, indent=4, )


class DockerWrapper:
    """docstring for DockerWrapper"""
    def __init__(self, dockerfile_bn, filename, image_os, yaml_fn):
        self.dockerfile_bn = dockerfile_bn
        self.fn = filename
        self.image_os = image_os
        self.yaml_fn = yaml_fn

    def _write_run(self, cmd):
        self.dockerfile_fh.write(' '.join(["RUN"] + cmd) + "\n\n")

    def write_file(self):
        with open(self.fn, 'wt') as fh:
            self.dockerfile_fh = fh
            assert re.search("\\A[A-Za-z0-9\\:_]+\\Z", self.image_os)
            fh.write("FROM {}\n\n".format(self.image_os))
            self._write_run(cmd=["echo", "helloworld", ])
            self._write_run(cmd=["expr", "4", "'*'", "6"])
            fh.write("COPY . /git\n")
            pkgs = [
                "clang",
                "cmake",
                "diffutils",
                "freecell-solver",
                "make",
                "perl-core",
                "perl-devel",
                "python3-devel",
                "python3-pip",
                "python3-pysol-cards",
            ]
            assert pkgs == sorted(pkgs)
            self._write_run(cmd=["dnf", "-y", "install"] + pkgs)
            self._write_run(cmd=["pip", "install", "--upgrade"] +
                            ["pysol_cards"])
            fh.write("RUN set -e -x; cd /git ; gmake retest\n\n")
            if 0:
                fh.write("ENTRYPOINT [\"/bin/sh\", \"-c\", \" set -e -x; "
                         "cd /git ; gmake retest\",]\n")
            self.dockerfile_fh = None

    def write_yaml_file(self):
        data = {
            'description': 'pysol-cards-C docker test',
            'name': "Hello World",
            'runs': {
                'image': self.dockerfile_bn,
                'using': 'docker',
            },
        }
        _write(output_path=self.yaml_fn, data=data)

    def run(self):
        subprocess.run(["podman", "build", "--file", self.fn, ".",])


if False:
    d = DockerWrapper(filename="Dockerfile", image_os="fedora:42")
    d.write_file()
    d.run()

curdir = Path(".")
dockerfile_dir = curdir / "hello-world-docker-action"
dockerfile_dir.mkdir(exist_ok=True, parents=True)
dockerfile_bn = "Dockerfile"
dockerfile_fn = dockerfile_dir / dockerfile_bn
yaml_fn = dockerfile_dir / "action.yml"
d = DockerWrapper(
    dockerfile_bn=dockerfile_bn, filename=dockerfile_fn,
    image_os="fedora:42", yaml_fn=yaml_fn)
d.write_file()
d.write_yaml_file()
d.run()
subprocess.run(["git", "add", dockerfile_fn, yaml_fn, ])

sys.exit(0)
